{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/pages/shop/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview\";\nimport CollectionPage from \"../collection\"; // import {\n//   firestore,\n//   convertCollectionsSnapshotToMap,\n// } from \"../../firebase/firebase.utils\";\n// import { updateCollections } from \"../../redux/shop/shop.actions\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner\";\nimport { removeItem } from \"../../redux/cart/cart.actions\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends Component {\n  // state = {\n  //   loading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    //      using firebase observable style object\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     console.log(\"collectionsMap\", collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    //      OR using a Promise\n    // collectionRef.get().then(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //   console.log(\"snapshot\", collectionsMap);\n    //   updateCollections(collectionsMap)\n    //   this.setState({ loading: false })\n    // })\n    //      OR using Fetch .... it was very nested\n    // fetch(`https://firestore.googleapis.com/v1/projects/crwn-db-fbe5a/databases/(default)/documents/collections`)\n    // .then(res => res.json())\n    // .then(collections => console.log('test',collections.documents))\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props; // const { loading } = this.state\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionOverviewWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/pages/shop/index.jsx"],"names":["React","Component","Route","CollectionsOverview","CollectionPage","fetchCollectionsStartAsync","selectIsCollectionFetching","createStructuredSelector","connect","WithSpinner","removeItem","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","componentDidMount","props","render","match","isCollectionFetching","path","loading","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,cAAP,MAA2B,eAA3B,C,CACA;AACA;AACA;AACA;AACA;;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AAIA,MAAMC,6BAA6B,GAAGF,WAAW,CAACN,mBAAD,CAAjD;KAAMQ,6B;AACN,MAAMC,yBAAyB,GAAGH,WAAW,CAACL,cAAD,CAA7C;MAAMQ,yB;;AAEN,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAC/B;AACA;AACA;AACA;AAEAa,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAET,MAAAA;AAAF,QAAiC,KAAKU,KAA5C;AACAV,IAAAA,0BAA0B,GAFR,CAGlB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAIDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkC,KAAKH,KAA7C,CADO,CAEP;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAFtB;AAGE,QAAA,MAAM,EAAGJ,KAAD,iBACN,QAAC,6BAAD;AAA+B,UAAA,SAAS,EAAEK,OAA1C;AAAA,aAAuDL;AAAvD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGJ,KAAD,iBACN,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEK,OAAtC;AAAA,aAAmDL;AAAnD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AAxD8B;;AA2DjC,MAAMM,eAAe,GAAGd,wBAAwB,CAAC;AAC/CW,EAAAA,oBAAoB,EAAEZ;AADyB,CAAD,CAAhD;;AAIA,MAAMgB,kBAAkB,GAAIC,QAAD,KAAe;AACxClB,EAAAA,0BAA0B,EAAE,MAAMkB,QAAQ,CAAClB,0BAA0B,EAA3B;AADF,CAAf,CAA3B;;AAIA,eAAeG,OAAO,CAACa,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview\";\nimport CollectionPage from \"../collection\";\n// import {\n//   firestore,\n//   convertCollectionsSnapshotToMap,\n// } from \"../../firebase/firebase.utils\";\n// import { updateCollections } from \"../../redux/shop/shop.actions\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors'\nimport { createStructuredSelector } from 'reselect'\nimport { connect } from \"react-redux\";\n\nimport WithSpinner from \"../../components/with-spinner\"; \nimport { removeItem } from \"../../redux/cart/cart.actions\";\n\n\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview)\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\nclass ShopPage extends Component {\n  // state = {\n  //   loading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { fetchCollectionsStartAsync } = this.props\n    fetchCollectionsStartAsync()\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n\n    //      using firebase observable style object\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     console.log(\"collectionsMap\", collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    //      OR using a Promise\n    // collectionRef.get().then(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //   console.log(\"snapshot\", collectionsMap);\n    //   updateCollections(collectionsMap)\n    //   this.setState({ loading: false })\n    // })\n    //      OR using Fetch .... it was very nested\n    // fetch(`https://firestore.googleapis.com/v1/projects/crwn-db-fbe5a/databases/(default)/documents/collections`)\n    // .then(res => res.json())\n    // .then(collections => console.log('test',collections.documents))\n  }\n\n  \n\n  render() {\n    const { match, isCollectionFetching } = this.props;\n    // const { loading } = this.state\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(props) => (\n            <CollectionOverviewWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}
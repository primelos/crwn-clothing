{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/pages/shop/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview\";\nimport CollectionPage from \"../collection\"; // import {\n//   firestore,\n//   convertCollectionsSnapshotToMap,\n// } from \"../../firebase/firebase.utils\";\n// import { updateCollections } from \"../../redux/shop/shop.actions\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner\";\nimport { removeItem } from \"../../redux/cart/cart.actions\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends Component {\n  // state = {\n  //   loading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    //      using firebase observable style object\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     console.log(\"collectionsMap\", collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    //      OR using a Promise\n    // collectionRef.get().then(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //   console.log(\"snapshot\", collectionsMap);\n    //   updateCollections(collectionsMap)\n    //   this.setState({ loading: false })\n    // })\n    //      OR using Fetch .... it was very nested\n    // fetch(`https://firestore.googleapis.com/v1/projects/crwn-db-fbe5a/databases/(default)/documents/collections`)\n    // .then(res => res.json())\n    // .then(collections => console.log('test',collections.documents))\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props; // const { loading } = this.state\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionOverviewWithSpinner, {\n          isLoading: isCollectionFetching,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: !isCollectionsLoaded,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/pages/shop/index.jsx"],"names":["React","Component","Route","CollectionsOverview","CollectionPage","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","createStructuredSelector","connect","WithSpinner","removeItem","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,cAAP,MAA2B,eAA3B,C,CACA;AACA;AACA;AACA;AACA;;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SACEC,0BADF,EAEEC,yBAFF,QAGO,iCAHP;AAIA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AAIA,MAAMC,6BAA6B,GAAGF,WAAW,CAACP,mBAAD,CAAjD;KAAMS,6B;AACN,MAAMC,yBAAyB,GAAGH,WAAW,CAACN,cAAD,CAA7C;MAAMS,yB;;AAEN,MAAMC,QAAN,SAAuBb,SAAvB,CAAiC;AAC/B;AACA;AACA;AACA;AAEAc,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEV,MAAAA;AAAF,QAAiC,KAAKW,KAA5C;AACAX,IAAAA,0BAA0B,GAFR,CAGlB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAIDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAuD,KAAKJ,KAAlE,CADO,CAEP;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAFtB;AAGE,QAAA,MAAM,EAAGL,KAAD,iBACN,QAAC,6BAAD;AACE,UAAA,SAAS,EAAEG,oBADb;AAAA,aAEMH;AAFN;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGL,KAAD,iBACN,QAAC,yBAAD;AACE,UAAA,SAAS,EAAE,CAACI,mBADd;AAAA,aAEMJ;AAFN;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;;AA9D8B;;AAiEjC,MAAMM,eAAe,GAAGd,wBAAwB,CAAC;AAC/CW,EAAAA,oBAAoB,EAAEb,0BADyB;AAE/Cc,EAAAA,mBAAmB,EAAEb;AAF0B,CAAD,CAAhD;;AAKA,MAAMgB,kBAAkB,GAAIC,QAAD,KAAe;AACxCnB,EAAAA,0BAA0B,EAAE,MAAMmB,QAAQ,CAACnB,0BAA0B,EAA3B;AADF,CAAf,CAA3B;;AAIA,eAAeI,OAAO,CAACa,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview\";\nimport CollectionPage from \"../collection\";\n// import {\n//   firestore,\n//   convertCollectionsSnapshotToMap,\n// } from \"../../firebase/firebase.utils\";\n// import { updateCollections } from \"../../redux/shop/shop.actions\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport {\n  selectIsCollectionFetching,\n  selectIsCollectionsLoaded,\n} from \"../../redux/shop/shop.selectors\";\nimport { createStructuredSelector } from 'reselect'\nimport { connect } from \"react-redux\";\n\nimport WithSpinner from \"../../components/with-spinner\"; \nimport { removeItem } from \"../../redux/cart/cart.actions\";\n\n\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview)\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\nclass ShopPage extends Component {\n  // state = {\n  //   loading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { fetchCollectionsStartAsync } = this.props\n    fetchCollectionsStartAsync()\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n\n    //      using firebase observable style object\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     console.log(\"collectionsMap\", collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    //      OR using a Promise\n    // collectionRef.get().then(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //   console.log(\"snapshot\", collectionsMap);\n    //   updateCollections(collectionsMap)\n    //   this.setState({ loading: false })\n    // })\n    //      OR using Fetch .... it was very nested\n    // fetch(`https://firestore.googleapis.com/v1/projects/crwn-db-fbe5a/databases/(default)/documents/collections`)\n    // .then(res => res.json())\n    // .then(collections => console.log('test',collections.documents))\n  }\n\n  \n\n  render() {\n    const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\n    // const { loading } = this.state\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(props) => (\n            <CollectionOverviewWithSpinner\n              isLoading={isCollectionFetching}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner\n              isLoading={!isCollectionsLoaded}\n              {...props}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/pages/shop/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview\";\nimport CollectionPage from \"../collection\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner\";\nimport { removeItem } from \"../../redux/cart/cart.actions\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection(\"collections\"); //      using firebase observable style object\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     console.log(\"collectionsMap\", collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    //      OR using a Promise\n    // collectionRef.get().then(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //   updateCollections(collectionsMap)\n    //   this.setState({ loading: false })\n    // })\n    //      OR using Fetch .... it was very nested\n\n    fetch(`https://firestore.googleapis.com/v1/projects/crwn-db-fbe5a/databases/(default)/documents/collections`).then(res => res.json()).then(collections => console.log('test', collections.documents.fields));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionOverviewWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/pages/shop/index.jsx"],"names":["React","Component","Route","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapshotToMap","updateCollections","connect","WithSpinner","removeItem","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","res","json","collections","console","log","documents","fields","render","match","path","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,MAAMC,6BAA6B,GAAGF,WAAW,CAACN,mBAAD,CAAjD;KAAMQ,6B;AACN,MAAMC,yBAAyB,GAAGH,WAAW,CAACL,cAAD,CAA7C;MAAMQ,yB;;AAEN,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/Ba,KAD+B,GACvB;AACNC,MAAAA,OAAO,EAAE;AADH,KADuB;AAAA,SAI/BC,uBAJ+B,GAIL,IAJK;AAAA;;AAM/BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEV,MAAAA;AAAF,QAAwB,KAAKW,KAAnC;AACA,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CAFkB,CAIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,IAAAA,KAAK,CAAE,sGAAF,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,WAAW,CAACG,SAAZ,CAAsBC,MAAzC,CAFrB;AAGD;;AAIDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKb,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEiB,KAAK,CAACC,IAAK,EAFtB;AAGE,QAAA,MAAM,EAAGd,KAAD,iBACN,QAAC,6BAAD;AAA+B,UAAA,SAAS,EAAEH,OAA1C;AAAA,aAAuDG;AAAvD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEa,KAAK,CAACC,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGd,KAAD,iBACN,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEH,OAAtC;AAAA,aAAmDG;AAAnD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AArD8B;;AAwDjC,MAAMe,kBAAkB,GAAIC,QAAD,KAAe;AACxC3B,EAAAA,iBAAiB,EAAG4B,cAAD,IACjBD,QAAQ,CAAC3B,iBAAiB,CAAC4B,cAAD,CAAlB;AAF8B,CAAf,CAA3B;;AAKA,eAAe3B,OAAO,CAAC,IAAD,EAAOyB,kBAAP,CAAP,CAAkCpB,QAAlC,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview\";\nimport CollectionPage from \"../collection\";\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport { connect } from \"react-redux\";\n\nimport WithSpinner from \"../../components/with-spinner\"; \nimport { removeItem } from \"../../redux/cart/cart.actions\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview)\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\nclass ShopPage extends Component {\n  state = {\n    loading: true,\n  };\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n\n    //      using firebase observable style object\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     console.log(\"collectionsMap\", collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    //      OR using a Promise\n    // collectionRef.get().then(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //   updateCollections(collectionsMap)\n    //   this.setState({ loading: false })\n    // })\n    //      OR using Fetch .... it was very nested\n    fetch(`https://firestore.googleapis.com/v1/projects/crwn-db-fbe5a/databases/(default)/documents/collections`)\n    .then(res => res.json())\n    .then(collections => console.log('test',collections.documents.fields))\n  }\n\n  \n\n  render() {\n    const { match } = this.props;\n    const { loading } = this.state\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(props) => (\n            <CollectionOverviewWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateCollections: (collectionsMap) =>\n    dispatch(updateCollections(collectionsMap)),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}
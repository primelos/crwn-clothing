{"ast":null,"code":"// Selectors can compute derived data, allowing Redux to store the minimal possible state.\n// Selectors are efficient. A selector is not recomputed unless one of its arguments changes.\n// Selectors are composable. They can be used as input to other selectors.\nimport { createSelector } from 'reselect';\n\nconst selectCart = state => state.cart;\n\nexport const selectCartItems = createSelector([selectCart], cart => cart.cartItems);\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumalatedQuantity, cartQuantity) => accumalatedQuantity + cartQuantity.quantity, 0));\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumalatedQuantity, cartQuantity) => accumalatedQuantity + cartQuantity.quantity * cartQuantity.price, 0));","map":{"version":3,"sources":["/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/redux/cart/cart-selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumalatedQuantity","cartQuantity","quantity","selectCartTotal","price"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,cAAT,QAA+B,UAA/B;;AAGA,MAAMC,UAAU,GAAGC,KAAK,IAAKA,KAAK,CAACC,IAAnC;;AAEA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE1CE,IAAD,IAAUA,IAAI,CAACE,SAF4B,CAAtC;AAKP,OAAO,MAAMC,gBAAgB,GAAGN,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE5CE,IAAI,IAAIA,IAAI,CAACI,MAF+B,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,CAAC,CAACI,eAAD,CAAD,EAAqBC,SAAD,IACpEA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,YAAtB,KACED,mBAAmB,GAAGC,YAAY,CAACC,QAFvC,EAGE,CAHF,CADgD,CAA3C;AAQP,OAAO,MAAMC,eAAe,GAAGb,cAAc,CAAC,CAACI,eAAD,CAAD,EAAqBC,SAAD,IAC/DA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,YAAtB,KACED,mBAAmB,GAAGC,YAAY,CAACC,QAAb,GAAwBD,YAAY,CAACG,KAF/D,EAEsE,CAFtE,CAD2C,CAAtC","sourcesContent":["// Selectors can compute derived data, allowing Redux to store the minimal possible state.\n// Selectors are efficient. A selector is not recomputed unless one of its arguments changes.\n// Selectors are composable. They can be used as input to other selectors.\n\nimport { createSelector } from 'reselect'\n\n\nconst selectCart = state =>  state.cart\n\nexport const selectCartItems = createSelector(\n  [selectCart],\n  (cart) => cart.cartItems\n)\n\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  cart => cart.hidden\n)\n\nexport const selectCartItemsCount = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (accumalatedQuantity, cartQuantity) =>\n      accumalatedQuantity + cartQuantity.quantity,\n    0\n  )\n)\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (accumalatedQuantity, cartQuantity) =>\n      accumalatedQuantity + cartQuantity.quantity * cartQuantity.price, 0\n  )\n);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import firebase from 'firebase/app';\nimport \"firebase/firestore\";\nimport 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC2JXbhiQH_X-WyRYa0qW9IXjPoZxm6MGE\",\n  authDomain: \"crwn-db-fbe5a.firebaseapp.com\",\n  projectId: \"crwn-db-fbe5a\",\n  storageBucket: \"crwn-db-fbe5a.appspot.com\",\n  messagingSenderId: \"225956968712\",\n  appId: \"1:225956968712:web:e1257a01a67c92958214bd\",\n  measurementId: \"G-61Z4Z7N7MP\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get(); // console.log(snapShot);\n\n  const collectionSnapShot = await collectionRef.get();\n  console.log({\n    collectionSnapShot\n  });\n  console.log({\n    collection: collectionSnapShot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/alearanibar/codingcfv/reactpractice/react-mastery/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapShot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,SAAS,EAAE,eAHU;AAIrBC,EAAAA,aAAa,EAAE,2BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB,CAN2E,CAO3E;;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA;AAAF,GAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,IAAAA,UAAU,EAAEG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA4BV,GAAG,IAAIA,GAAG,CAACW,IAAJ,EAAnC;AAAd,GAAZ;;AAEA,MAAG,CAACP,QAAQ,CAACQ,MAAb,EAAqB;AACnB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBlB,QAA/B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACD,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGlB;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAMqB,KAAN,EAAa;AACbX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,KAAK,CAACC,OAAzC;AACD;AACF;;AACD,SAAOrB,OAAP;AACD,CA3BM;AA6BPZ,QAAQ,CAACkC,aAAT,CAAuBjC,cAAvB;AAEA,OAAO,MAAMkC,IAAI,GAAGnC,QAAQ,CAACmC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAIpC,QAAQ,CAACmC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAepC,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/firestore\";\nimport 'firebase/auth'\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC2JXbhiQH_X-WyRYa0qW9IXjPoZxm6MGE\",\n  authDomain: \"crwn-db-fbe5a.firebaseapp.com\",\n  projectId: \"crwn-db-fbe5a\",\n  storageBucket: \"crwn-db-fbe5a.appspot.com\",\n  messagingSenderId: \"225956968712\",\n  appId: \"1:225956968712:web:e1257a01a67c92958214bd\",\n  measurementId: \"G-61Z4Z7N7MP\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if(!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n  const collectionRef = firestore.collection('users')\n\n  const snapShot = await userRef.get()\n  // console.log(snapShot);\n  const collectionSnapShot = await collectionRef.get()\n  console.log({ collectionSnapShot })\n  console.log({ collection: collectionSnapShot.docs.map(doc => doc.data())});\n\n  if(!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date()\n    try{\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      })\n    } catch(error) {\n      console.log('error creating user', error.message);\n    }\n  }\n  return userRef\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({ prompt: 'select_account' })\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}